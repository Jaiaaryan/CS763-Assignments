% Load images.
Imgdata = imageDatastore('../../input/ledge');
% Display images to be stitched
montage(Imgdata.Files)

% Read the first image from the image set.
I = readimage(Imgdata, 1);
numImages = numel(Imgdata.Files);
tforms(numImages) = projective2d(eye(3));

% Iterate over remaining image pairs
for n = 2:numImages
    I1 = readimage(Imgdata, n-1);
    I2 = readimage(Imgdata, n);
    [matched_pts1, matched_pts2] = get_matchedPoints(I1, I2);
    A = ransacHomography(matched_pts2, matched_pts1, 2);
    %iA = inv(A);
    tforms(n) = projective2d(A');
    tforms(n).T = tforms(n).T * tforms(n-1).T;
end

imageSize = size(I);  % all the images are the same size
tforms = recenter_transformer(tforms, imageSize);

for i = 1:numel(tforms)
    [xlim(i,:), ylim(i,:)] = outputLimits(tforms(i), [1 imageSize(2)], [1 imageSize(1)]);
end

% Find the minimum and maximum output limits
xMin = min([1; xlim(:)]);
xMax = max([imageSize(2); xlim(:)]);

yMin = min([1; ylim(:)]);
yMax = max([imageSize(1); ylim(:)]);

% Width and height of panorama.
width  = round(xMax - xMin);
height = round(yMax - yMin);

% Initialize the "empty" panorama.
panorama = zeros([height width 3], 'like', I);

blender = vision.AlphaBlender('Operation', 'Binary mask', ...
    'MaskSource', 'Input port');

% Create a 2-D spatial reference object defining the size of the panorama.
xLimits = [xMin xMax];
yLimits = [yMin yMax];
panoramaView = imref2d([height width], xLimits, yLimits);

% Create the panorama.
for i = 1:numImages
    I = readimage(Imgdata, i);
    % Transform I into the panorama.
    warpedImage = imwarp(I, tforms(i), 'OutputView', panoramaView);
    % Generate a binary mask.
    mask = imwarp(true(size(I,1),size(I,2)), tforms(i), 'OutputView', panoramaView);
    % Overlay the warpedImage onto the panorama.
    panorama = step(blender, panorama, warpedImage, mask);
end

figure
imshow(panorama)